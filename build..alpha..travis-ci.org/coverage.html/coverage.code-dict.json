{"/home/travis/build/npmtest/node-npmtest-markdown-to-html/test.js":"/* istanbul instrument in package npmtest_markdown_to_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/lib.npmtest_markdown_to_html.js":"/* istanbul instrument in package npmtest_markdown_to_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_markdown_to_html = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_markdown_to_html = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-markdown-to-html && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_markdown_to_html */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_markdown_to_html\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_markdown_to_html.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_markdown_to_html.rollup.js'] =\n            local.assetsDict['/assets.npmtest_markdown_to_html.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_markdown_to_html.__dirname + '/lib.npmtest_markdown_to_html.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/node_modules/markdown-to-html/index.js":"exports.Markdown = require('./lib/markdown.js');\r\n\r\nexports.GithubMarkdown = require('./lib/github-markdown.js');\r\n\r\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/node_modules/markdown-to-html/lib/markdown.js":"'use strict';\r\n// Converts a markdown file into an HTML file, writing it to stdout.\r\n// Implemented as a readable stream.\r\n//\r\n// Usage:\r\n//   node format_markdown <filename> <context> <github user id>\r\n//\r\nvar marked = require('marked');\r\nvar pygmentize = require('pygmentize-bundled');\r\nvar linkify = require('../lib/gfm-linkify');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar util = require('util');\r\n\r\nvar Readable = require('stream').Readable;\r\nutil.inherits(Markdown, Readable);\r\n\r\nfunction Markdown() {\r\n  this.super_ = this.constructor.super_;\r\n  this.super_.call(this);\r\n  this.debug = false;\r\n  this.bufmax = 1024;\r\n  this.html = '';\r\n  this.setEncoding('utf8');\r\n}\r\n\r\nMarkdown.prototype.render = function(fileName, opts, onDone) {\r\n  var flavour    = opts.flavor || 'gfm',\r\n      highlight  = opts.highlight,\r\n      stylesheet = opts.stylesheet,\r\n      context    = opts.context,\r\n      title      = opts.title,\r\n      titleText  = title;\r\n\r\n  if (title) {\r\n    var dirName  = path.dirname(fileName),\r\n        baseName = path.basename(fileName),\r\n        pathName = path.resolve(fileName);\r\n    titleText = titleText.replace('$FILENAME', fileName);\r\n    titleText = titleText.replace('$DIRNAME',  dirName);\r\n    titleText = titleText.replace('$BASENAME', baseName);\r\n    titleText = titleText.replace('$PATHNAME', pathName);\r\n  }\r\n\r\n  this.done = false;\r\n  \r\n  this.once('error', function(err) {\r\n    if (onDone) onDone(err)\r\n    else console.error('>>>' + err);\r\n  });\r\n\r\n  if (fileName === null) {\r\n    if (onDone) onDone('Missing file name arg');\r\n    else console.error('>>>Missing file name arg');\r\n  }\r\n\r\n  //======================================================\r\n  // Read the file content.\r\n  //======================================================\r\n  fs.readFile(fileName, onFileReady.bind(this));\r\n\r\n  //======================================================\r\n  // Process the file content.\r\n  //======================================================\r\n  function onFileReady(err, data) {\r\n    if (err) {\r\n      if (onDone) onDone(err);\r\n      else console.error('>>>' + err);\r\n      return;\r\n    }\r\n\r\n    var fileContent = data.toString();\r\n\r\n    var options = {\r\n      gfm: (flavour === 'gfm') ? true : false,\r\n      breaks: true,\r\n      tables: true,\r\n      sanitize: true\r\n    };\r\n\r\n    if (highlight) {\r\n      options['highlight'] = function(code, lang, callback) {\r\n        pygmentize({lang: lang, format: 'html'}, code, function(err, result) {\r\n          if (err) {\r\n            callback(err);\r\n          }\r\n          callback(err, result.toString());\r\n        });\r\n      }\r\n    }\r\n\r\n    //======================================================\r\n    // Call marked to parse the file content\r\n    //======================================================\r\n    if (this.debug) console.error('>>>starting to get code');\r\n    try {\r\n      marked.setOptions(options);\r\n      marked(fileContent, getCode.bind(this));\r\n    } catch(err) {\r\n      if (onDone) onDone(err)\r\n      else console.error('>>>' + err);\r\n    }\r\n\r\n    //======================================================\r\n    // Enhance the output of marked with optional header\r\n    // or trailer. Linkify if context specified.\r\n    //======================================================\r\n    function getCode(err, code) {\r\n      if (err) {\r\n        if (onDone) onDone(err)\r\n        else console.error('>>>' + err);\r\n        return;\r\n      }\r\n      if (stylesheet || title) {\r\n        if (titleText == null) titleText = fileName;\r\n        this.cat('<!DOCTYPE html>\\n' +\r\n                 '<html>\\n' +\r\n                 '<head>\\n' +\r\n                 '  <title>' + titleText + '</title>\\n');\r\n        if (stylesheet) {\r\n          this.cat('  <link rel=\"stylesheet\" href=\"' + stylesheet + '\">\\n');\r\n        }\r\n        this.cat('</head>\\n<body>\\n' );\r\n      }\r\n\r\n      if (context) {\r\n        this.cat( linkify(code, context) );\r\n      } else {\r\n        this.cat( code );\r\n      }\r\n\r\n      if (stylesheet || title) {\r\n        this.cat( '</body>\\n</html>\\n' );\r\n      }\r\n      if (this.debug) console.error('>>>finished getting code');\r\n      this.done = true;\r\n      if (onDone) onDone();\r\n    } // end getCode\r\n  } // end onFileReady\r\n} // end render\r\n\r\nMarkdown.prototype.cat = function(data) {\r\n  this.html += data;\r\n}\r\n\r\nMarkdown.prototype._read = function(size) {\r\n  var pushSize = Math.min(size, this.bufmax);\r\n  if (this.html.length > 0) {\r\n    if (this.debug) console.error('>>>_read size=' + pushSize + ', html=\"' + this.html.substr(0, pushSize) + '\"');\r\n    this.push(this.html.substr(0, pushSize));\r\n    this.html = this.html.slice(pushSize);\r\n    if (this.done && this.html.length === 0) {\r\n      this.push(null); // eof\r\n    }\r\n  } else {\r\n    if (this.debug) console.error('>>>_read - nothing to push');\r\n  }\r\n  return;\r\n}\r\n\r\nmodule.exports = Markdown;\r\n\r\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/node_modules/markdown-to-html/lib/gfm-linkify.js":"/*\r\n * Adapted from Github's port of showdown.js -- A javascript port of Markdown.\r\n *\r\n * GitHub Flavored Markdown modifications by Tekkub\r\n * @see https://github.com/isaacs/github-flavored-markdown/blob/master/scripts/showdown.js\r\n * Fixes for \"&#39;\" issue misrecognition by C. W. Johannsen.\r\n */\r\nvar debug = false;\r\n\r\nmodule.exports = function (text, context) {\r\n  var username, repo;\r\n  if (debug) console.log('>>>context=\"' + context + \"'\");\r\n  if (context) {\r\n    var parts = context.split('/');\r\n    username = parts[0];\r\n    repo = parts[1];\r\n    if (!repo) context = null;\r\n  }\r\n\r\n  // Auto-link user/repo@sha1\r\n  text = text.replace(/([a-z0-9_\\-+=.]+\\/[a-z0-9_\\-+=.]+)@([a-f0-9]{40})/ig, function (wholeMatch, context, sha) {\r\n    if (debug) console.log('wholeMatch 1=\"' + wholeMatch + '\"');\r\n    return '<a href=\"https://github.com/' + context + '/commit/' + sha + '\">' + context + '@' + sha.substring(0, 7) + '</a>';\r\n  });\r\n\r\n  // Auto-link user@sha1 and user#issue if repo is defined\r\n  if (repo) {\r\n    text = text.replace(/([a-z0-9_\\-+=.]+)@([a-f0-9]{40})/ig, function (wholeMatch, username, sha, matchIndex) {\r\n      if (debug) console.log('wholeMatch 2=\"' + wholeMatch + '\"');\r\n      var left = text.slice(0, matchIndex), right = text.slice(matchIndex);\r\n      if (left.match(/\\/$/) || (left.match(/<[^>]+$/) && right.match(/^[^>]*>/))) return wholeMatch;\r\n      return '<a href=\"https://github.com/' + username + '/' + repo + '/commit/' + sha + '\">' + username + '@' + sha.substring(0, 7) + '</a>';\r\n    });\r\n    text = text.replace(/([a-z0-9_\\-+=.]+)#([0-9]+)/ig, function (wholeMatch, username, issue, matchIndex) {\r\n      if (debug) console.log('wholeMatch 3=\"' + wholeMatch + '\", username=\"' + username + '\", issue=\"' + issue + '\"');\r\n      var left = text.slice(0, matchIndex), right = text.slice(matchIndex);\r\n      if (left.match(/\\/$/) || (left.match(/<[^>]+$/) && right.match(/^[^>]*>/))) return wholeMatch;\r\n      return '<a href=\"https://github.com/' + username + '/' + repo + '/issues/' + issue + '\">' + wholeMatch + '</a>';\r\n    });\r\n  }\r\n\r\n  // Auto-link sha1 and #issue if context is defined\r\n  if (context) {\r\n    text = text.replace(/[a-f0-9]{40}/ig, function (wholeMatch, matchIndex) {\r\n     if (debug) console.log('wholeMatch 4=\"' + wholeMatch + '\"');\r\n     var left = text.slice(0, matchIndex), right = text.slice(matchIndex);\r\n      if (left.match(/@$/) || (left.match(/<[^>]+$/) && right.match(/^[^>]*>/))) return wholeMatch;\r\n      return '<a href=\"https://github.com/' + context + '/commit/' + wholeMatch + '\">' + wholeMatch.substring(0, 7) + '</a>';\r\n    });\r\n    text = text.replace(/[^\\&]#([0-9]+)/ig, function (wholeMatch, issue, matchIndex) {\r\n      if (debug) console.log('wholeMatch 5=\"' + wholeMatch + '\", issue=\"' + issue + '\"');\r\n      var left = text.slice(0, matchIndex+1), right = text.slice(matchIndex);\r\n      if (debug) console.log('left=\"' + left + '\", right=\"' + right + '\"');\r\n      if (left.match(/[a-z0-9_\\-+=.]$/) || (left.match(/<[^>]+$/) && right.match(/^[^>]*>/))) return wholeMatch;\r\n      return wholeMatch.slice(0,1) + '<a href=\"https://github.com/' + context + '/issues/' + issue + '\">' + wholeMatch.slice(1) + '</a>';\r\n    });\r\n  }\r\n\r\n  // Auto-link user/repo#issue\r\n  text = text.replace(/([a-z0-9_\\-+=.]+\\/[a-z0-9_\\-+=.]+[^&]?)#([0-9]+)/ig, function (wholeMatch, context, issue) {\r\n    if (debug) console.log('wholeMatch 6=\"' + wholeMatch + '\", context=\"' + context + '\", issue=' + issue);\r\n    return '<a href=\"https://github.com/' + context + '/issues/' + issue + '\">' + wholeMatch + '</a>';\r\n  });\r\n\r\n\r\n  return text;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-markdown-to-html/node_modules/markdown-to-html/lib/github-markdown.js":"'use strict';\r\n// Converts a markdown file into an HTML file, writing it to stdout.\r\n// Uses the github API, so it outputs exactly what you will see on github.\r\n//\r\n// Usage:\r\n//   node format_markdown <filename> <context> <github user id>\r\n//\r\nvar request = require('request');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar util = require('util');\r\nvar Readable = require('stream').Readable;\r\nutil.inherits(GithubMarkdown, Readable);\r\n\r\nfunction GithubMarkdown() {\r\n  this.super_ = this.constructor.super_;\r\n  this.super_.call(this);\r\n  this.debug = false;\r\n  this.bufmax = 1024;\r\n  this.html = '';\r\n  this.setEncoding('utf8');\r\n}\r\n\r\nGithubMarkdown.prototype.render = function(fileName, opts, onDone) {\r\n  if (this.debug) console.error('>>>rendering...');\r\n  var flavor     = opts.flavor || 'markdown',\r\n      context    = opts.context,\r\n      stylesheet = opts.stylesheet,\r\n      userName   = opts.username || 'request',\r\n      title      = opts.title,\r\n      titleText  = title;\r\n\r\n  if (title) {\r\n    var dirName  = path.dirname(fileName),\r\n        baseName = path.basename(fileName),\r\n        pathName = path.resolve(fileName);\r\n    titleText = titleText.replace('$FILENAME', fileName);\r\n    titleText = titleText.replace('$DIRNAME',  dirName);\r\n    titleText = titleText.replace('$BASENAME', baseName);\r\n    titleText = titleText.replace('$PATHNAME', pathName);\r\n  }\r\n\r\n  this.done = false;\r\n\r\n  this.once('error', function(err) {\r\n    if (onDone) onDone(err)\r\n    else console.error('>>>' + err);\r\n  });\r\n\r\n  if (! fileName) {\r\n    console.log('Missing file name arg');\r\n    process.exit();\r\n  }\r\n\r\n  //======================================================\r\n  // Read the file content.\r\n  //======================================================\r\n  fs.readFile(fileName, onFileReady.bind(this));\r\n\r\n  //======================================================\r\n  // Process the file content.\r\n  //======================================================\r\n  function onFileReady(err, data) {\r\n    if (err) {\r\n      if (onDone) onDone(err)\r\n      else console.error('>>>' + err);\r\n      return;\r\n    }\r\n\r\n    var fileContent = data.toString();\r\n\r\n    var msg = {\r\n      text:    fileContent,\r\n      mode:    flavor,\r\n      context: context\r\n    };\r\n\r\n    var jsonMsg = JSON.stringify(msg);\r\n\r\n    var options = {\r\n      method: 'POST',\r\n      preambleCRLF: true,\r\n      postambleCRLF: true,\r\n      uri: 'https://api.github.com/markdown',\r\n      'content-type': 'application/json',\r\n      headers: {\r\n        'User-Agent' : userName\r\n      },\r\n      body: jsonMsg\r\n    };\r\n\r\n    //=======================================================\r\n    // Call the Github Markdown API to parse the file content\r\n    //=======================================================\r\n    request(options, handleResponse.bind(this));\r\n\r\n    //======================================================\r\n    // Enhance the output of the Github Markdown API with\r\n    // optional header or trailer.\r\n    //======================================================\r\n    function handleResponse(err, response, body) {\r\n      if (this.debug) console.error('>>>handling response...');\r\n      if (err) {\r\n        if (onDone) onDone(err)\r\n        else console.error('>>>upload to github failed: ', err);\r\n        return;\r\n      }\r\n\r\n      if (stylesheet || title) {\r\n        if (titleText == null) titleText = fileName;\r\n        this.cat('<!DOCTYPE html>\\n' +\r\n                 '<html>\\n' +\r\n                 '<head>\\n' +\r\n                 '  <title>' + titleText + '</title>\\n' +\r\n                 '  <link rel=\"stylesheet\" href=\"' + stylesheet + '\">\\n' +\r\n                 '</head>\\n' +\r\n                 '<body>\\n' );\r\n      }\r\n\r\n      this.cat(body);\r\n      this.cat('\\n');\r\n\r\n      if (stylesheet || title) {\r\n        this.cat( '</body>\\n</html>\\n' );\r\n      }\r\n\r\n      if (this.debug) console.error('>>>finished getting code');\r\n      this.done = true;\r\n      if (onDone) onDone();\r\n    } // end handleResponse\r\n  } // end onFileReady\r\n} // end render\r\n\r\nGithubMarkdown.prototype.cat = function(data) {\r\n  this.html += data;\r\n}\r\n\r\nGithubMarkdown.prototype._read = function(size) {\r\n  var pushSize = Math.min(size, this.bufmax);\r\n  if (this.html.length > 0) {\r\n    if (this.debug) console.error('>>>_read size=' + pushSize + ', html=\"' + this.html.substr(0, pushSize) + '\"');\r\n    this.push(this.html.substr(0, pushSize));\r\n    this.html = this.html.slice(pushSize);\r\n    if (this.done && this.html.length === 0) {\r\n      this.push(null); // eof\r\n    }\r\n  } else {\r\n    if (this.debug) console.error('>>>_read - nothing to push');\r\n  }\r\n  return;\r\n}\r\n\r\nmodule.exports = GithubMarkdown;\r\n\r\n"}